/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package form;

import GUI.GUI_APP;
import entity.BangPhanCongCongDoan;
import entity.CongDoan;
import entity.CongNhan;
import entity.SanPham;
import javax.swing.GroupLayout.Alignment;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.PatternSyntaxException;

import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ScrollPaneConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import DAO.BangChamCongCongNhan_Dao;
import DAO.CongNhan_Dao;
import DAO.DAO_BangPhanCongCongDoan;
import DAO.DAO_CongDoan;
import DAO.DAO_SanPham;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.awt.event.ActionEvent;
import java.awt.Font;
import java.awt.GridLayout;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import java.awt.Dimension;

/**
 *
 * @author Vu
 */
public class frm_SanPham_PhanCong extends javax.swing.JPanel {
	public GUI_APP app;
	/**
	 * Creates new form PanelPhanCongCongDoan
	 */
	public frm_SanPham_PhanCong() {
		initComponents();
		hienThiDanhSachSanPhamChuaHoanThanh();
		hienThiDanhSachSanPhamTheoLuaChon();
		addSearchListenerSanPham();
		addSearchListenerCongNhan();
		addSearchListenerPhanCong();
		addSearchListenerCongDoan();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jScrollPane1.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		tblDSSP = new javax.swing.JTable();
		btnPhanCongTuDong = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		jScrollPane2.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		jScrollPane2.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		tblDSCongDoan = new javax.swing.JTable();
		tblDSCongDoan.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				tblDSCongDoanMouseClicked(evt);;
			}
		});
		tblDSCongDoan.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				tblDSCongDoanMouseClicked1(evt);;
			}
		});

		setBorder(new TitledBorder(null, "Danh s\u00E1ch c\u00F4ng nh\u00E2n", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		setMaximumSize(new java.awt.Dimension(1250, 800));
		setMinimumSize(new java.awt.Dimension(1196, 680));
		setPreferredSize(new Dimension(1250, 668));

		jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách sản phẩm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

		tblDSSP.setModel(new DefaultTableModel(
			new Object[][] {
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
			},
			new String[] {
				"STT", "M\u00E3 s\u1EA3n ph\u1EA9m", "T\u00EAn s\u1EA3n ph\u1EA9m"
			}
		));
		tblDSSP.getColumnModel().getColumn(0).setPreferredWidth(35);
		tblDSSP.getColumnModel().getColumn(0).setMaxWidth(35);
		tblDSSP.getColumnModel().getColumn(1).setPreferredWidth(90);
		tblDSSP.getColumnModel().getColumn(1).setMaxWidth(200);
		jScrollPane1.setViewportView(tblDSSP);
		tblDSSP.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				if ("Chưa hoàn thành".equals(cmbSanPham.getSelectedItem())) {
					tblDSSPMouseClicked(evt);
				} else if ("Đã hoàn thành".equals(cmbSanPham.getSelectedItem())) {
					tblDSSPDaHoanThanhMouseClicked(evt);
				}
			}
		});
		btnPhanCongTuDong.setFont(new Font("Segoe UI", Font.BOLD, 12)); // NOI18N
		btnPhanCongTuDong.setText("Phân công tự động");
		btnPhanCongTuDong.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				int selectedRowCongDoan = tblDSCongDoan.getSelectedRow();

				if (selectedRowCongDoan >= 0) {
					maCongDoanSelected = tblDSCongDoan.getValueAt(selectedRowCongDoan, 1) != null ?
							tblDSCongDoan.getValueAt(selectedRowCongDoan, 1).toString() : "";

					if (maCongDoanSelected.startsWith("CD0001")) {
						openPhanCongDialogTuDong(maCongDoanSelected);
					} else if (maCongDoanSelected.startsWith("CD0002")) {
						openPhanCongDialogTuDong(maCongDoanSelected);
					} else if (maCongDoanSelected.startsWith("CD0003")) {
						openPhanCongDialogTuDong(maCongDoanSelected);
					} else if (maCongDoanSelected.startsWith("CD0004")) {
						openPhanCongDialogTuDong(maCongDoanSelected);
					} else {
						hienThongBaoLoi("Công đoạn không hợp lệ.");
					}
				} else {
					hienThongBaoLoi("Vui lòng chọn một công đoạn từ bảng trước khi thực hiện phân công.");
				}
			}
		});

		jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách công đoạn", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14))); // NOI18N

		tblDSCongDoan.setModel(new DefaultTableModel(
			new Object[][] {
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
			},
			new String[] {
				"STT", "M\u00E3 c\u00F4ng \u0111o\u1EA1n", "T\u00EAn c\u00F4ng \u0111o\u1EA1n", "S\u1ED1 l\u01B0\u1EE3ng c\u1EA7n l\u00E0m", "S\u1ED1 l\u01B0\u1EE3ng c\u00F2n l\u1EA1i", "S\u1ED1 c\u00F4ng nh\u00E2n t\u1ED1i \u0111a"
			}
		));
		tblDSCongDoan.getColumnModel().getColumn(0).setPreferredWidth(35);
		tblDSCongDoan.getColumnModel().getColumn(0).setMaxWidth(35);
		tblDSCongDoan.getColumnModel().getColumn(1).setPreferredWidth(131);
		tblDSCongDoan.getColumnModel().getColumn(1).setMaxWidth(200);
		tblDSCongDoan.getColumnModel().getColumn(2).setPreferredWidth(89);
		tblDSCongDoan.getColumnModel().getColumn(2).setMaxWidth(250);
		tblDSCongDoan.getColumnModel().getColumn(3).setPreferredWidth(99);
		tblDSCongDoan.getColumnModel().getColumn(3).setMaxWidth(500);
		tblDSCongDoan.getColumnModel().getColumn(4).setPreferredWidth(98);
		tblDSCongDoan.getColumnModel().getColumn(4).setMaxWidth(500);
		tblDSCongDoan.getColumnModel().getColumn(5).setPreferredWidth(106);
		tblDSCongDoan.getColumnModel().getColumn(5).setMaxWidth(500);
		jScrollPane2.setViewportView(tblDSCongDoan);

		txtTimKiemSanPham = new JTextField();
		txtTimKiemSanPham.setColumns(10);

		lblTimKiemSanPham = new JLabel("Tìm kiếm");

		jScrollPane3 = new JScrollPane();
		jScrollPane3.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		jScrollPane3.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		jScrollPane3.setBorder(new TitledBorder(null, "Danh s\u00E1ch ph\u00E2n c\u00F4ng", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		jScrollPane4 = new JScrollPane();
		jScrollPane4.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
		jScrollPane4.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		jScrollPane4.setBorder(new TitledBorder(null, "Danh s\u00E1ch c\u00F4ng nh\u00E2n", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		btnPhanCongThuCong = new JButton("Phân công");
		btnPhanCongThuCong.setFont(new Font("Segoe UI", Font.BOLD, 12));
		btnPhanCongThuCong.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				int selectedRowCongDoan = tblDSCongDoan.getSelectedRow();
				int selectedRowCongNhan = tblDSCN.getSelectedRow();
				int selectedRowSanPham = tblDSSP.getSelectedRow();
				if(selectedRowSanPham < 0) {
					hienThongBaoLoi("Vui lòng chọn một sản phẩm từ bảng sản phẩm trước khi thực hiện phân công.");
					return;
				}
				if (selectedRowCongDoan >= 0) {
					maCongDoanSelected = tblDSCongDoan.getValueAt(selectedRowCongDoan, 1) != null ?
							tblDSCongDoan.getValueAt(selectedRowCongDoan, 1).toString() : "";

					if (maCongDoanSelected.startsWith("CD0001")) {
						if (selectedRowCongNhan >= 0) {
							openPhanCongDialogThemCatGo();
						} else {
							hienThongBaoLoi("Vui lòng chọn một công nhân từ bảng công nhân trước khi thực hiện phân công.");
						}
					} else if (maCongDoanSelected.startsWith("CD0002")) {
						if (selectedRowCongNhan >= 0) {
							openPhanCongDialogThemCheTac();
						} else {
							hienThongBaoLoi("Vui lòng chọn một công nhân từ bảng công nhân trước khi thực hiện phân công.");
						}
					} else if (maCongDoanSelected.startsWith("CD0003")) {
						if (selectedRowCongNhan >= 0) {
							openPhanCongDialogThemBeMat();
						} else {
							hienThongBaoLoi("Vui lòng chọn một công nhân từ bảng công nhân trước khi thực hiện phân công.");
						}
					} else if (maCongDoanSelected.startsWith("CD0004")) {
						if (selectedRowCongNhan >= 0) {
							openPhanCongDialogThemLapRap();
						} else {
							hienThongBaoLoi("Vui lòng chọn một công nhân từ bảng công nhân trước khi thực hiện phân công.");
						}
					} else {
						hienThongBaoLoi("Công đoạn không hợp lệ.");
					}
				} else {
					hienThongBaoLoi("Vui lòng chọn một công đoạn từ bảng trước khi thực hiện phân công.");
				}
			}
		});


		txtTimKiemCongNhan = new JTextField();
		txtTimKiemCongNhan.setColumns(10);

		lblTimKiemCongNhan = new JLabel("Tìm kiếm");

		txtDSPhanCong = new JTextField();
		txtDSPhanCong.setColumns(10);

		lblDSPhanCong = new JLabel("Tìm kiếm");

		btnXoaPhanCong = new JButton("Xóa");
		btnXoaPhanCong.setFont(new Font("Segoe UI", Font.BOLD, 12));
		btnXoaPhanCong.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        // Check if any checkboxes are selected before showing the confirmation dialog
		        if (!areAnyCheckboxesSelected()) {
		            hienThongBaoLoi("Vui lòng chọn các hàng có checkbox được chọn để thực hiện xóa.");
		            return;  // Stop further execution since no checkboxes are selected
		        }

		        // Continue with the rest of your code
		        openPhanCongDialogXoa();
		    }
		});

		btnSua = new JButton("Sửa");
		btnSua.setFont(new Font("Segoe UI", Font.BOLD, 12));
		btnSua.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				int selectedRow = tblDSPhanCong.getSelectedRow();

				if (selectedRow >= 0) {
					// Lấy thông tin từ hàng đã chọn
					maCongNhanSelected = tblDSPhanCong.getValueAt(selectedRow, 1) != null ? tblDSPhanCong.getValueAt(selectedRow, 1).toString() : "";

					openPhanCongDialogSua();
				} else {
					// Hiển thị thông báo nếu không có hàng nào được chọn
					hienThongBaoLoi("Vui lòng chọn một công nhân từ bảng trước khi thực hiện sửa.");
				}
			}
		});

		cmbSanPham = new JComboBox();
		cmbSanPham.setModel(new DefaultComboBoxModel(new String[] {"Chưa hoàn thành", "Đã hoàn thành"}));
		cmbSanPham.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				hienThiDanhSachSanPhamTheoLuaChon();
			}
		});

		txtDSCongDoan = new JTextField();
		txtDSCongDoan.setColumns(10);

		lblTimKiemCongDoan = new JLabel("Tìm kiếm");

		btnChonTatCa = new JButton("Chọn tất cả");
		btnChonTatCa.setFont(new Font("Segoe UI", Font.BOLD, 12));
		btnChonTatCa.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				DefaultTableModel model = (DefaultTableModel) tblDSPhanCong.getModel();
				int rowCount = model.getRowCount();

				// Tạo hoặc lấy giá trị đếm từ thuộc tính client của nút
				Integer clickCount = (Integer) btnChonTatCa.getClientProperty("clickCount");

				// Nếu clickCount là null, gán giá trị mặc định là 0
				if (clickCount == null) {
					clickCount = 0;
				}

				// Tăng giá trị đếm
				clickCount++;

				// Lưu giá trị đếm vào thuộc tính client của nút
				btnChonTatCa.putClientProperty("clickCount", clickCount);

				// Xác định giá trị cần đặt dựa trên tính chẵn/lẻ của đếm
				boolean setValue = (clickCount % 2 == 1); // true cho đếm lẻ, false cho đếm chẵn

				// Đặt giá trị cho tất cả các dòng trong cột "Chọn"
				for (int i = 0; i < rowCount; i++) {
					model.setValueAt(setValue, i, 5); // Giả sử 5 là chỉ số cột "Chọn"
				}
			}
		});
		
		btnHDSD = new JButton("?");
		btnHDSD.setFont(new Font("Tahoma", Font.BOLD, 10));
		
		lblHDSD = new JLabel("Hướng dẫn sử dụng");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.TRAILING)
				.addGroup(layout.createSequentialGroup()
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
							.addGap(28)
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
									.addGroup(layout.createParallelGroup(Alignment.LEADING)
										.addComponent(jScrollPane4, GroupLayout.PREFERRED_SIZE, 292, GroupLayout.PREFERRED_SIZE)
										.addGroup(layout.createSequentialGroup()
											.addPreferredGap(ComponentPlacement.RELATED)
											.addComponent(txtTimKiemCongNhan, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
											.addPreferredGap(ComponentPlacement.RELATED)
											.addComponent(lblTimKiemCongNhan, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)))
									.addPreferredGap(ComponentPlacement.RELATED)
									.addComponent(btnPhanCongThuCong))
								.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 312, GroupLayout.PREFERRED_SIZE)))
						.addGroup(layout.createSequentialGroup()
							.addGap(27)
							.addComponent(txtTimKiemSanPham, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.UNRELATED)
							.addComponent(lblTimKiemSanPham, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
							.addGap(18)
							.addComponent(cmbSanPham, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE)))
					.addGap(20)
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
							.addComponent(txtDSCongDoan, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.UNRELATED)
							.addComponent(lblTimKiemCongDoan, GroupLayout.PREFERRED_SIZE, 59, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED, 419, Short.MAX_VALUE)
							.addComponent(lblHDSD, GroupLayout.PREFERRED_SIZE, 109, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnHDSD)
							.addPreferredGap(ComponentPlacement.RELATED))
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addGroup(layout.createSequentialGroup()
									.addComponent(txtDSPhanCong, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)
									.addPreferredGap(ComponentPlacement.RELATED)
									.addComponent(lblDSPhanCong, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE))
								.addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(layout.createParallelGroup(Alignment.LEADING)
								.addComponent(btnXoaPhanCong)
								.addComponent(btnSua)
								.addComponent(btnChonTatCa)))
						.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 656, GroupLayout.PREFERRED_SIZE))
					.addGap(65))
				.addGroup(layout.createSequentialGroup()
					.addContainerGap(1099, Short.MAX_VALUE)
					.addComponent(btnPhanCongTuDong))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addGap(27)
					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(lblTimKiemSanPham)
								.addComponent(txtTimKiemSanPham, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(cmbSanPham, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(txtDSCongDoan, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblTimKiemCongDoan))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(layout.createParallelGroup(Alignment.BASELINE)
								.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 226, GroupLayout.PREFERRED_SIZE)
								.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 226, GroupLayout.PREFERRED_SIZE))
							.addGap(43)
							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
								.addGroup(layout.createParallelGroup(Alignment.BASELINE)
									.addComponent(txtTimKiemCongNhan, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
									.addComponent(lblTimKiemCongNhan))
								.addGroup(layout.createParallelGroup(Alignment.BASELINE)
									.addComponent(txtDSPhanCong, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
									.addComponent(lblDSPhanCong)))
							.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addGroup(layout.createSequentialGroup()
							.addComponent(btnPhanCongTuDong, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
							.addGap(75)))
					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
						.addGroup(layout.createSequentialGroup()
							.addGroup(layout.createParallelGroup(Alignment.TRAILING)
								.addGroup(layout.createSequentialGroup()
									.addComponent(btnChonTatCa, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
									.addPreferredGap(ComponentPlacement.UNRELATED)
									.addComponent(btnSua, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
									.addPreferredGap(ComponentPlacement.UNRELATED)
									.addComponent(btnXoaPhanCong)
									.addGap(35))
								.addGroup(layout.createParallelGroup(Alignment.BASELINE)
									.addComponent(jScrollPane4, GroupLayout.PREFERRED_SIZE, 314, GroupLayout.PREFERRED_SIZE)
									.addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 314, GroupLayout.PREFERRED_SIZE)))
							.addContainerGap())
						.addGroup(layout.createSequentialGroup()
							.addComponent(btnPhanCongThuCong, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
							.addGap(38))))
				.addGroup(layout.createSequentialGroup()
					.addGap(18)
					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblHDSD)
						.addComponent(btnHDSD))
					.addContainerGap(631, Short.MAX_VALUE))
		);

		tblDSCN = new JTable();
		tblDSCN.setModel(new DefaultTableModel(
			new Object[][] {
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
				{null, null, null},
			},
			new String[] {
				"STT", "M\u00E3 c\u00F4ng nh\u00E2n", "T\u00EAn c\u00F4ng nh\u00E2n"
			}
		));
		tblDSCN.getColumnModel().getColumn(0).setPreferredWidth(35);
		tblDSCN.getColumnModel().getColumn(0).setMaxWidth(35);
		tblDSCN.getColumnModel().getColumn(1).setPreferredWidth(98);
		tblDSCN.getColumnModel().getColumn(1).setMaxWidth(200);
		jScrollPane4.setViewportView(tblDSCN);

		tblDSPhanCong = new JTable();
		tblDSPhanCong.setModel(new DefaultTableModel(
			new Object[][] {
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
				{null, null, null, null, null, null},
			},
			new String[] {
				"STT", "M\u00E3 c\u00F4ng nh\u00E2n", "T\u00EAn c\u00F4ng nh\u00E2n", "S\u1ED1 l\u01B0\u1EE3ng ph\u00E2n c\u00F4ng", "Ng\u00E0y ph\u00E2n c\u00F4ng", "Ch\u1ECDn"
			}
		) {
			Class[] columnTypes = new Class[] {
				Object.class, Object.class, Object.class, Object.class, Object.class, Boolean.class
			};
			public Class getColumnClass(int columnIndex) {
				return columnTypes[columnIndex];
			}
		});
		tblDSPhanCong.getColumnModel().getColumn(0).setPreferredWidth(35);
		tblDSPhanCong.getColumnModel().getColumn(0).setMaxWidth(35);
		tblDSPhanCong.getColumnModel().getColumn(1).setPreferredWidth(89);
		tblDSPhanCong.getColumnModel().getColumn(1).setMaxWidth(200);
		tblDSPhanCong.getColumnModel().getColumn(2).setPreferredWidth(93);
		tblDSPhanCong.getColumnModel().getColumn(3).setPreferredWidth(142);
		tblDSPhanCong.getColumnModel().getColumn(3).setMaxWidth(450);
		tblDSPhanCong.getColumnModel().getColumn(4).setPreferredWidth(90);
		tblDSPhanCong.getColumnModel().getColumn(4).setMaxWidth(1000);
		tblDSPhanCong.getColumnModel().getColumn(5).setPreferredWidth(50);
		tblDSPhanCong.getColumnModel().getColumn(5).setMaxWidth(50);
		jScrollPane3.setViewportView(tblDSPhanCong);
		tblDSPhanCong.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				tblDSPhanCongMouseClicked1(evt);;
			}
		});
		this.setLayout(layout);
	}// </editor-fold>//GEN-END:initComponents


	private void hienThiDanhSachSanPhamTheoLuaChon() {
		String luaChonSanPham = (String) cmbSanPham.getSelectedItem();
		if ("Chưa hoàn thành".equals(luaChonSanPham)) {
			hienThiDanhSachSanPhamChuaHoanThanh();
			// Show components when Chưa hoàn thành is selected  
			tblDSCN.setVisible(true);
			btnPhanCongThuCong.setVisible(true);
			btnXoaPhanCong.setVisible(true);
			btnSua.setVisible(true);
			btnPhanCongTuDong.setVisible(true);
			txtTimKiemCongNhan.setVisible(true);
			jScrollPane4.setVisible(true);
			tblDSCN.setVisible(true);
			lblTimKiemCongNhan.setVisible(true);
			lblTimKiemCongDoan.setVisible(false);
			txtDSCongDoan.setVisible(false);
			DefaultTableModel modelDSCN = (DefaultTableModel) tblDSCN.getModel();
			modelDSCN.setRowCount(0);
			DefaultTableModel modelDSPhanCong = (DefaultTableModel) tblDSPhanCong.getModel();
			modelDSPhanCong.setRowCount(0);
			DefaultTableModel modelDSCongDoan = (DefaultTableModel) tblDSCongDoan.getModel();
			modelDSCongDoan.setRowCount(0);
			btnChonTatCa.setVisible(true);
		} else if ("Đã hoàn thành".equals(luaChonSanPham)) {
			// Hide components when Đã hoàn thành is selected
			tblDSCN.setVisible(false);
			btnPhanCongThuCong.setVisible(false);
			btnXoaPhanCong.setVisible(false);
			btnSua.setVisible(false);
			btnPhanCongTuDong.setVisible(false);
			txtTimKiemCongNhan.setVisible(false);
			jScrollPane4.setVisible(false);
			tblDSCN.setVisible(false);
			lblTimKiemCongNhan.setVisible(false);
			lblTimKiemCongDoan.setVisible(true);
			txtDSCongDoan.setVisible(true);
			btnChonTatCa.setVisible(false);
			DefaultTableModel modelDSCN = (DefaultTableModel) tblDSCN.getModel();
			modelDSCN.setRowCount(0);
			DefaultTableModel modelDSPhanCong = (DefaultTableModel) tblDSPhanCong.getModel();
			modelDSPhanCong.setRowCount(0);
			DefaultTableModel modelDSCongDoan = (DefaultTableModel) tblDSCongDoan.getModel();
			modelDSCongDoan.setRowCount(0);
			hienThiDanhSachSanPhamDaHoanThanh();
			hienThiTatCaDanhSachCongDoanDaHoanThanh();
		}
	}


	void hienThiDanhSachSanPhamChuaHoanThanh() {
		DAO_SanPham dao = new DAO_SanPham();
		ArrayList<SanPham> dsSanPham = dao.layDanhSachSanPhamChuaHoanThanh();
		hienThiDanhSachSanPham(dsSanPham);
	}

	void hienThiDanhSachSanPhamDaHoanThanh() {
		DAO_SanPham dao = new DAO_SanPham();
		ArrayList<SanPham> dsSanPham = dao.layDanhSachSanPhamDaHoanThanh();
		hienThiDanhSachSanPham(dsSanPham);
	}

	private void hienThiDanhSachSanPham(ArrayList<SanPham> dsSanPham) {
		DefaultTableModel model = (DefaultTableModel) tblDSSP.getModel();
		model.setRowCount(0); // Xóa hết các dòng hiện tại trong table

		int stt = 1; // Biến đếm

		for (SanPham sp : dsSanPham) {
			Object[] row = {
					stt,
					sp.getMaSanPham(),
					sp.getTenSP(),
			};
			model.addRow(row);
			stt++; // Tăng giá trị của biến đếm
		}
	}

	private void hienThiDanhSachCongDoanTheoSPChuaHoanThanh(String maSP) {
		DAO_CongDoan dao = new DAO_CongDoan();
		ArrayList<CongDoan> dsCongDoan = dao.layDanhSachCongDoanTheoSP(maSP);
		daoCongDoan.setDs(dsCongDoan);
		DefaultTableModel model = (DefaultTableModel) tblDSCongDoan.getModel();
		model.setRowCount(0); // Xóa hết các dòng hiện tại trong table
		int stt = 1; // Biến đếm
		DAO_BangPhanCongCongDoan dao_BangPhanCongCongDoan = new DAO_BangPhanCongCongDoan();
		for (CongDoan congDoan : dsCongDoan) {
			Object[] row = {
					stt,
					congDoan.getMaCongDoan(),
					congDoan.getLoaiCongDoan(),
					congDoan.getSoLuongThanhPhan(),
					congDoan.getSoLuongThanhPhan() - dao_BangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(congDoan.getMaCongDoan()),
					congDoan.getSoCongNhan()
			};
			model.addRow(row);
			stt++; // Tăng giá trị của biến đếm
		}
	}
	private void hienThiDanhSachCongDoanTheoSPDaHoanThanh(String maSP) {
		DAO_CongDoan dao = new DAO_CongDoan();
		ArrayList<CongDoan> dsCongDoan = dao.layDanhSachCongDoanTheoSPDaHoanThanh(maSP);

		DefaultTableModel model = (DefaultTableModel) tblDSCongDoan.getModel();
		model.setRowCount(0); // Xóa hết các dòng hiện tại trong table
		int stt = 1; // Biến đếm
		DAO_BangPhanCongCongDoan dao_BangPhanCongCongDoan = new DAO_BangPhanCongCongDoan();
		for (CongDoan congDoan : dsCongDoan) {
			Object[] row = {
					stt,
					congDoan.getMaCongDoan(),
					congDoan.getLoaiCongDoan(),
					congDoan.getSoLuongThanhPhan(),
					congDoan.getSoLuongThanhPhan() - dao_BangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(congDoan.getMaCongDoan()),
					congDoan.getSoLuongThanhPhan(),
					congDoan.getSoCongNhan()
			};
			model.addRow(row);
			stt++; // Tăng giá trị của biến đếm
		}
	}
	private void hienThiTatCaDanhSachCongDoanDaHoanThanh() {
		DAO_CongDoan dao = new DAO_CongDoan();
		ArrayList<CongDoan> dsCongDoan = dao.layDanhSachTatCaCongDoanDaHoanThanh();

		DefaultTableModel model = (DefaultTableModel) tblDSCongDoan.getModel();
		model.setRowCount(0); // Xóa hết các dòng hiện tại trong table
		int stt = 1; // Biến đếm
		DAO_BangPhanCongCongDoan dao_BangPhanCongCongDoan = new DAO_BangPhanCongCongDoan();
		for (CongDoan congDoan : dsCongDoan) {
			Object[] row = {
					stt,
					congDoan.getMaCongDoan(),
					congDoan.getLoaiCongDoan(),
					congDoan.getSoLuongThanhPhan(),
					congDoan.getSoLuongThanhPhan() - dao_BangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(congDoan.getMaCongDoan()),
					congDoan.getSoLuongThanhPhan(),
					congDoan.getSoCongNhan()
			};
			model.addRow(row);
			stt++; // Tăng giá trị của biến đếm
		}
	}
	private void tblDSSPMouseClicked(java.awt.event.MouseEvent evt) {
		int selectedRow = tblDSSP.getSelectedRow();
		if (selectedRow >= 0) {
			// Lấy thông tin từ hàng đã chọn
			String maSP = tblDSSP.getValueAt(selectedRow, 1) != null ? tblDSSP.getValueAt(selectedRow, 1).toString() : "";
			// Reset bảng tblDSCN
			DefaultTableModel modelDSCN = (DefaultTableModel) tblDSCN.getModel();
			modelDSCN.setRowCount(0);
			DefaultTableModel modelDSPhanCong = (DefaultTableModel) tblDSPhanCong.getModel();
			modelDSPhanCong.setRowCount(0);
			// Hiển thị danh sách công đoạn theo sản phẩm
			hienThiDanhSachCongDoanTheoSPChuaHoanThanh(maSP);
		}
	}
	private void tblDSSPDaHoanThanhMouseClicked(java.awt.event.MouseEvent evt) {
		int selectedRow = tblDSSP.getSelectedRow();
		if (selectedRow >= 0) {
			// Lấy thông tin từ hàng đã chọn
			String maSP = tblDSSP.getValueAt(selectedRow, 1) != null ? tblDSSP.getValueAt(selectedRow, 1).toString() : "";
			// Reset bảng tblDSCN
			DefaultTableModel modelDSCN = (DefaultTableModel) tblDSCN.getModel();
			modelDSCN.setRowCount(0);
			DefaultTableModel modelDSPhanCong = (DefaultTableModel) tblDSPhanCong.getModel();
			modelDSPhanCong.setRowCount(0);
			// Hiển thị danh sách công đoạn theo sản phẩm
			hienThiDanhSachCongDoanTheoSPDaHoanThanh(maSP);
		}
	}

	// Trong phương thức tblDSCongDoanMouseClicked
	private String maCongDoanSelected;
	private void tblDSCongDoanMouseClicked1(java.awt.event.MouseEvent evt) {
		int selectedRow = tblDSCongDoan.getSelectedRow();
		if (selectedRow >= 0) {
			// Lấy thông tin từ hàng đã chọn
			maCongDoanSelected = tblDSCongDoan.getValueAt(selectedRow, 1) != null ? tblDSCongDoan.getValueAt(selectedRow, 1).toString() : "";
		}
	}
	private String maCongNhanSelected;
	private void tblDSPhanCongMouseClicked1(java.awt.event.MouseEvent evt) {
		int selectedRow = tblDSPhanCong.getSelectedRow();
		if (selectedRow >= 0) {
			// Lấy thông tin từ hàng đã chọn
			maCongNhanSelected = tblDSPhanCong.getValueAt(selectedRow, 1).toString();
		}
	}
	private int selectedRowDSCongDoan;
	private void tblDSCongDoanMouseClicked(java.awt.event.MouseEvent evt) {
		selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
		int selectedRow = tblDSCongDoan.getSelectedRow();
		if (selectedRow >= 0) {
			// Lấy thông tin từ hàng đã chọn
			String tenCongDoan = tblDSCongDoan.getValueAt(selectedRow, 2) != null ? tblDSCongDoan.getValueAt(selectedRow, 2).toString() : "";
			String maCongDoan = tblDSCongDoan.getValueAt(selectedRow, 1) != null ? tblDSCongDoan.getValueAt(selectedRow, 1).toString() : "";
			// Reset bảng tblDSCN
			DefaultTableModel modelDSCN = (DefaultTableModel) tblDSCN.getModel();
			modelDSCN.setRowCount(0);

			// Sử dụng switch case để chuyển đổi và hiển thị danh sách phân công
			hienThiDanhSachPhanCongTheoMaCongDoan(maCongDoan);
			hienThiDanhSachCongNhanTheoMaChuyenMon(tenCongDoan);
		}
	}
	BangChamCongCongNhan_Dao bangChamCongCongNhan_Dao = new BangChamCongCongNhan_Dao();
	private void openPhanCongDialogThemCatGo() {
		selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
		JTextField txtNhapSoLuongThem = new JTextField();
		JLabel lblSoLuongConLai = new JLabel("Số lượng còn lại:");
		DAO_BangPhanCongCongDoan bangPhanCongCongDoan = new DAO_BangPhanCongCongDoan();

		CongNhan_Dao congNhan_Dao = new CongNhan_Dao();
		String maCongDoan = maCongDoanSelected;
		int soLuongToiDa = Integer.parseInt(tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 5).toString());
		String tenCongDoan = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 2).toString();
		int soLuongConLai = daoCongDoan.laySoLuongThanhPhanTheoMaCongDoan(maCongDoan) - bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan);
		JLabel lblSoLuongConLaiHienThi = new JLabel(String.valueOf(soLuongConLai));
		JLabel lblNhapSoLuongThem = new JLabel("Nhập số lượng thêm:");

		// Kiểm tra số lượng công nhân phân công đã tối đa trước khi mở hộp thoại
		if (soLuongToiDa - soLuongCongNhanDaPhanCong < 0) {
			hienThongBaoLoi("Số lượng công nhân phân công đã tối đa.");
			return;
		}

		JPanel panel = new JPanel(new GridLayout(2, 2));
		panel.add(lblSoLuongConLai);
		panel.add(lblSoLuongConLaiHienThi);
		panel.add(lblNhapSoLuongThem);
		panel.add(txtNhapSoLuongThem);

		int result = JOptionPane.showConfirmDialog(this, panel, "Phân công thủ công", JOptionPane.OK_CANCEL_OPTION);

		if (result == JOptionPane.OK_OPTION) {
			String soLuongThem = txtNhapSoLuongThem.getText();

			try {
				int soLuongThemInt = Integer.parseInt(soLuongThem);

				if (soLuongThemInt <= 0) {
					hienThongBaoLoi("Số lượng thêm phải lớn hơn 0.");
				} else if (soLuongThemInt > soLuongConLai) {
					hienThongBaoLoi("Số lượng thêm phải nhỏ hơn hoặc bằng số lượng còn lại.");
				} else {
					int selectedRowDSCN = tblDSCN.getSelectedRow();
					String maCongNhan = tblDSCN.getValueAt(selectedRowDSCN, 1).toString();
					int selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
					String maCongDoan1 = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 1).toString();
					int selecRowDSSP = tblDSSP.getSelectedRow();
					String maSanPham = tblDSSP.getValueAt(selecRowDSSP, 1).toString();
					int soLuongPhanCong = soLuongThemInt;
					LocalDate ngayPhanCong = LocalDate.now();
					CongDoan congDoan = daoCongDoan.timCongDoanTheoMa(maCongDoan);
					CongNhan congNhan = congNhan_Dao.timCongNhanBangMa(maCongNhan);
					BangPhanCongCongDoan phanCong = new BangPhanCongCongDoan(soLuongPhanCong, congDoan, congNhan, ngayPhanCong);
					bangPhanCongCongDoan.themPhanCongCongDoan(phanCong);
					hienThiDanhSachCongDoanTheoSPChuaHoanThanh(maSanPham);
					hienThiDanhSachPhanCongTheoMaCongDoan(maCongDoan1);
					hienThiDanhSachCongNhanTheoMaChuyenMon(tenCongDoan);
					System.out.println("Đã phân công " + soLuongThemInt + " công việc.");
					tblDSCongDoan.setRowSelectionInterval(selectedRowDSCongDoan, selectedRowDSCongDoan);
				}
			} catch (NumberFormatException e) {
				hienThongBaoLoi("Nhập số lượng thêm không hợp lệ!");
			}
		} else {
			hienThongBaoThongBao("Bạn đã hủy phân công.");
		}
	}
	private void openPhanCongDialogThemCheTac() {
		selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
		JTextField txtNhapSoLuongThem = new JTextField();
		JLabel lblSoLuongConLai = new JLabel("Số lượng còn lại:");
		DAO_BangPhanCongCongDoan bangPhanCongCongDoan = new DAO_BangPhanCongCongDoan();

		CongNhan_Dao congNhan_Dao = new CongNhan_Dao();
		String maCongDoan = maCongDoanSelected;
		int selectedRowDSSP = tblDSSP.getSelectedRow();
		String maCongDoanCatGo = "CD0001" + tblDSSP.getValueAt(selectedRowDSSP, 1).toString();
		System.out.println(maCongDoanCatGo);
		int soLuongToiDa = Integer.parseInt(tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 5).toString());
		String tenCongDoan = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 2).toString();
		int soLuongConLai = daoCongDoan.laySoLuongThanhPhanTheoMaCongDoan(maCongDoan) - bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan);
		int soLuongCoTheThem = bangChamCongCongNhan_Dao.laySoLuongDaChamCongTheoMaCongDoan(maCongDoanCatGo) - bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan);
		JLabel lblSoLuongConLaiHienThi = new JLabel(String.valueOf(soLuongConLai));
		JLabel lblNhapSoLuongThem = new JLabel("Nhập số lượng thêm:");
		JLabel lblSoLuongCoTheThem = new JLabel("Số lượng có thể thêm:");
		JLabel lblSoLuongCoTheThemHienThi = new JLabel(String.valueOf(soLuongCoTheThem));

		// Kiểm tra số lượng công nhân phân công đã tối đa trước khi mở hộp thoại
		if (soLuongToiDa - soLuongCongNhanDaPhanCong < 0) {
			hienThongBaoLoi("Số lượng công nhân phân công đã tối đa.");
			return;
		}
		if (soLuongCoTheThem == 0) {
			hienThongBaoLoi("Không đủ số lượng để phân công.");
			return;
		}
		JPanel panel = new JPanel(new GridLayout(3, 2));
		panel.add(lblSoLuongConLai);
		panel.add(lblSoLuongConLaiHienThi);
		panel.add(lblSoLuongCoTheThem);
		panel.add(lblSoLuongCoTheThemHienThi);
		panel.add(lblNhapSoLuongThem);
		panel.add(txtNhapSoLuongThem);

		int result = JOptionPane.showConfirmDialog(this, panel, "Phân công thủ công", JOptionPane.OK_CANCEL_OPTION);

		if (result == JOptionPane.OK_OPTION) {
			String soLuongThem = txtNhapSoLuongThem.getText();

			try {
				int soLuongThemInt = Integer.parseInt(soLuongThem);

				// Kiểm tra nếu số lượng thêm vào lớn hơn 0
				if (soLuongThemInt <= 0) {
					hienThongBaoLoi("Số lượng thêm phải lớn hơn 0.");
				} else if (soLuongThemInt > soLuongCoTheThem) {
					// Kiểm tra nếu số lượng thêm vào lớn hơn số lượng có thể thêm
					hienThongBaoLoi("Số lượng thêm phải nhỏ hơn hoặc bằng số lượng có thể thêm.");
				} else {
					// Lấy dữ liệu từ tblDSCN
					int selectedRowDSCN = tblDSCN.getSelectedRow();
					String maCongNhan = tblDSCN.getValueAt(selectedRowDSCN, 1).toString();
					int selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
					String maCongDoan1 = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 1).toString();
					int selecRowDSSP = tblDSSP.getSelectedRow();
					String maSanPham = tblDSSP.getValueAt(selecRowDSSP, 1).toString();
					int soLuongPhanCong = soLuongThemInt;
					LocalDate ngayPhanCong = LocalDate.now();
					CongDoan congDoan = daoCongDoan.timCongDoanTheoMa(maCongDoan);
					CongNhan congNhan = congNhan_Dao.timCongNhanBangMa(maCongNhan);
					BangPhanCongCongDoan phanCong = new BangPhanCongCongDoan(soLuongPhanCong, congDoan, congNhan, ngayPhanCong);
					bangPhanCongCongDoan.themPhanCongCongDoan(phanCong);
					hienThiDanhSachCongDoanTheoSPChuaHoanThanh(maSanPham);
					hienThiDanhSachPhanCongTheoMaCongDoan(maCongDoan1);
					hienThiDanhSachCongNhanTheoMaChuyenMon(tenCongDoan);
					System.out.println("Đã phân công " + soLuongThemInt + " công việc.");
					tblDSCongDoan.setRowSelectionInterval(selectedRowDSCongDoan, selectedRowDSCongDoan);
				}
			} catch (NumberFormatException e) {
				hienThongBaoLoi("Nhập số lượng thêm không hợp lệ!");
			}
		} else {
			hienThongBaoThongBao("Bạn đã hủy phân công.");
		}
	}
	int soLuongDaLamBeMat;
	private void openPhanCongDialogThemBeMat() {
		selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
		int selectedRowDSSP = tblDSSP.getSelectedRow();
		String maCongDoanCheTac = "CD0002" + tblDSSP.getValueAt(selectedRowDSSP, 1).toString();
		JTextField txtNhapSoLuongThem = new JTextField();
		JLabel lblSoLuongConLai = new JLabel("Số lượng còn lại:");
		DAO_BangPhanCongCongDoan bangPhanCongCongDoan = new DAO_BangPhanCongCongDoan();

		CongNhan_Dao congNhan_Dao = new CongNhan_Dao();
		String maCongDoan = maCongDoanSelected;
		int soLuongToiDa = Integer.parseInt(tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 5).toString());
		String tenCongDoan = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 2).toString();
		int soLuongConLai = daoCongDoan.laySoLuongThanhPhanTheoMaCongDoan(maCongDoan) - bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan);
		int soLuongCoTheThem = bangChamCongCongNhan_Dao.laySoLuongDaChamCongTheoMaCongDoan(maCongDoanCheTac)-bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan);
		JLabel lblSoLuongConLaiHienThi = new JLabel(String.valueOf(soLuongConLai));
		JLabel lblNhapSoLuongThem = new JLabel("Nhập số lượng thêm:");
		JLabel lblSoLuongCoTheThem = new JLabel("Số lượng có thể thêm:");
		JLabel lblSoLuongCoTheThemHienThi = new JLabel(String.valueOf(soLuongCoTheThem));

		// Kiểm tra số lượng công nhân phân công đã tối đa trước khi mở hộp thoại
		if (soLuongToiDa - soLuongCongNhanDaPhanCong < 0) {
			hienThongBaoLoi("Số lượng công nhân phân công đã tối đa.");
			return;
		}
		if (soLuongCoTheThem == 0) {
			hienThongBaoLoi("Không đủ số lượng để phân công.");
			return;
		}
		JPanel panel = new JPanel(new GridLayout(3, 2));
		panel.add(lblSoLuongConLai);
		panel.add(lblSoLuongConLaiHienThi);
		panel.add(lblSoLuongCoTheThem);
		panel.add(lblSoLuongCoTheThemHienThi);
		panel.add(lblNhapSoLuongThem);
		panel.add(txtNhapSoLuongThem);

		int result = JOptionPane.showConfirmDialog(this, panel, "Phân công thủ công", JOptionPane.OK_CANCEL_OPTION);

		if (result == JOptionPane.OK_OPTION) {
			String soLuongThem = txtNhapSoLuongThem.getText();

			try {
				int soLuongThemInt = Integer.parseInt(soLuongThem);

				// Kiểm tra nếu số lượng thêm vào lớn hơn 0
				if (soLuongThemInt <= 0) {
					hienThongBaoLoi("Số lượng thêm phải lớn hơn 0.");
				} else if (soLuongThemInt > soLuongCoTheThem) {
					// Kiểm tra nếu số lượng thêm vào lớn hơn số lượng có thể thêm
					hienThongBaoLoi("Số lượng thêm phải nhỏ hơn hoặc bằng số lượng có thể thêm.");
				} else {
					// Lấy dữ liệu từ tblDSCN
					int selectedRowDSCN = tblDSCN.getSelectedRow();
					String maCongNhan = tblDSCN.getValueAt(selectedRowDSCN, 1).toString();
					int selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
					String maCongDoan1 = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 1).toString();
					int selecRowDSSP = tblDSSP.getSelectedRow();
					String maSanPham = tblDSSP.getValueAt(selecRowDSSP, 1).toString();
					int soLuongPhanCong = soLuongThemInt;
					LocalDate ngayPhanCong = LocalDate.now();
					CongDoan congDoan = daoCongDoan.timCongDoanTheoMa(maCongDoan);
					CongNhan congNhan = congNhan_Dao.timCongNhanBangMa(maCongNhan);
					BangPhanCongCongDoan phanCong = new BangPhanCongCongDoan(soLuongPhanCong, congDoan, congNhan, ngayPhanCong);
					bangPhanCongCongDoan.themPhanCongCongDoan(phanCong);
					hienThiDanhSachCongDoanTheoSPChuaHoanThanh(maSanPham);
					hienThiDanhSachPhanCongTheoMaCongDoan(maCongDoan1);
					hienThiDanhSachCongNhanTheoMaChuyenMon(tenCongDoan);
					System.out.println("Đã phân công " + soLuongThemInt + " công việc.");
					tblDSCongDoan.setRowSelectionInterval(selectedRowDSCongDoan, selectedRowDSCongDoan);
				}
			} catch (NumberFormatException e) {
				hienThongBaoLoi("Nhập số lượng thêm không hợp lệ!");
			}
		} else {
			hienThongBaoThongBao("Bạn đã hủy phân công.");
		}
	}
	private void openPhanCongDialogThemLapRap() {
		selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
		int selectedRowDSSP = tblDSSP.getSelectedRow();
		String maCongDoanBeMat = "CD0003" + tblDSSP.getValueAt(selectedRowDSSP, 1).toString();
		JTextField txtNhapSoLuongThem = new JTextField();
		JLabel lblSoLuongConLai = new JLabel("Số lượng còn lại:");
		DAO_BangPhanCongCongDoan bangPhanCongCongDoan = new DAO_BangPhanCongCongDoan();
		DAO_CongDoan daoCongDoan = new DAO_CongDoan();
		CongNhan_Dao congNhan_Dao = new CongNhan_Dao();
		String maCongDoan = maCongDoanSelected;
		int soLuongToiDa = Integer.parseInt(tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 5).toString());
		String tenCongDoan = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 2).toString();
		int soLuongConLai = daoCongDoan.laySoLuongThanhPhanTheoMaCongDoan(maCongDoan) - bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan);
		int soLuongCoTheThem = bangChamCongCongNhan_Dao.laySoLuongDaChamCongTheoMaCongDoan(maCongDoanBeMat)-bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan);
		JLabel lblSoLuongConLaiHienThi = new JLabel(String.valueOf(soLuongConLai));
		JLabel lblNhapSoLuongThem = new JLabel("Nhập số lượng thêm:");
		JLabel lblSoLuongCoTheThem = new JLabel("Số lượng có thể thêm:");
		JLabel lblSoLuongCoTheThemHienThi = new JLabel(String.valueOf(soLuongCoTheThem));

		// Kiểm tra số lượng công nhân phân công đã tối đa trước khi mở hộp thoại
		if (soLuongToiDa - soLuongCongNhanDaPhanCong < 0) {
			hienThongBaoLoi("Số lượng công nhân phân công đã tối đa.");
			return;
		}
		if (soLuongCoTheThem == 0) {
			hienThongBaoLoi("Không đủ số lượng để phân công.");
			return;
		}
		JPanel panel = new JPanel(new GridLayout(3, 2));
		panel.add(lblSoLuongConLai);
		panel.add(lblSoLuongConLaiHienThi);
		panel.add(lblSoLuongCoTheThem);
		panel.add(lblSoLuongCoTheThemHienThi);
		panel.add(lblNhapSoLuongThem);
		panel.add(txtNhapSoLuongThem);

		int result = JOptionPane.showConfirmDialog(this, panel, "Phân công thủ công", JOptionPane.OK_CANCEL_OPTION);

		if (result == JOptionPane.OK_OPTION) {
			String soLuongThem = txtNhapSoLuongThem.getText();

			try {
				int soLuongThemInt = Integer.parseInt(soLuongThem);

				// Kiểm tra nếu số lượng thêm vào lớn hơn 0
				if (soLuongThemInt <= 0) {
					hienThongBaoLoi("Số lượng thêm phải lớn hơn 0.");
				} else if (soLuongThemInt > soLuongCoTheThem) {
					// Kiểm tra nếu số lượng thêm vào lớn hơn số lượng có thể thêm
					hienThongBaoLoi("Số lượng thêm phải nhỏ hơn hoặc bằng số lượng có thể thêm.");
				} else {
					// Lấy dữ liệu từ tblDSCN
					int selectedRowDSCN = tblDSCN.getSelectedRow();
					String maCongNhan = tblDSCN.getValueAt(selectedRowDSCN, 1).toString();
					int selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
					String maCongDoan1 = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 1).toString();
					int selecRowDSSP = tblDSSP.getSelectedRow();
					String maSanPham = tblDSSP.getValueAt(selecRowDSSP, 1).toString();
					int soLuongPhanCong = soLuongThemInt;
					LocalDate ngayPhanCong = LocalDate.now();
					CongDoan congDoan = daoCongDoan.timCongDoanTheoMa(maCongDoan);
					CongNhan congNhan = congNhan_Dao.timCongNhanBangMa(maCongNhan);
					BangPhanCongCongDoan phanCong = new BangPhanCongCongDoan(soLuongPhanCong, congDoan, congNhan, ngayPhanCong);
					bangPhanCongCongDoan.themPhanCongCongDoan(phanCong);
					hienThiDanhSachCongDoanTheoSPChuaHoanThanh(maSanPham);
					hienThiDanhSachPhanCongTheoMaCongDoan(maCongDoan1);
					hienThiDanhSachCongNhanTheoMaChuyenMon(tenCongDoan);
					System.out.println("Đã phân công " + soLuongThemInt + " công việc.");
					tblDSCongDoan.setRowSelectionInterval(selectedRowDSCongDoan, selectedRowDSCongDoan);
				}
			} catch (NumberFormatException e) {
				hienThongBaoLoi("Nhập số lượng thêm không hợp lệ!");
			}
		} else {
			hienThongBaoThongBao("Bạn đã hủy phân công.");
		}
	}
	DAO_CongDoan daoCongDoan = new DAO_CongDoan();
	private void openPhanCongDialogTuDong(String maCongDoanSelected) {
		int selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
		int selectedRowDSSP = tblDSSP.getSelectedRow();
		DAO_BangPhanCongCongDoan bangPhanCongCongDoan = new DAO_BangPhanCongCongDoan();
		CongNhan_Dao congNhan_Dao = new CongNhan_Dao();
		int soLuongCongNhanToiDa = Integer.parseInt(tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 5).toString());
		String tenCongDoan = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 2).toString();
		String maCongDoan = maCongDoanSelected;
		int soLuongConLai = Integer.parseInt(tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 4).toString());
		int soLuongCongNhanDaPhanCongTrongDSPhanCong = bangPhanCongCongDoan.laySoLuongPhanCong(maCongDoan);
		System.out.println("So luong trong danh sach phan cong  "+ soLuongCongNhanDaPhanCongTrongDSPhanCong);
		System.out.println("So luong cong nhan toi da: " + soLuongCongNhanToiDa);
		int soLuongCongNhanThemVao = soLuongCongNhanToiDa - soLuongCongNhanDaPhanCongTrongDSPhanCong;
		if(soLuongCongNhanThemVao > soLuongCongNhanTrongDSCN)
			soLuongCongNhanThemVao = soLuongCongNhanTrongDSCN;
		System.out.println("So luong cong nhan them vao " + soLuongCongNhanThemVao);
		// Xác định giá trị của soLuongCoTheThem dựa vào loại công đoạn
		int soLuongCoTheThem = 0;
		if (maCongDoan.startsWith("CD0001")) {
			soLuongCoTheThem = Integer.parseInt(tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 4).toString());
		} else if (maCongDoan.startsWith("CD0002")) {
			String maCongDoanCatGo = "CD0001" + tblDSSP.getValueAt(selectedRowDSSP, 1).toString();
			soLuongCoTheThem = bangChamCongCongNhan_Dao.laySoLuongDaChamCongTheoMaCongDoan(maCongDoanCatGo)-bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan);
		} else if (maCongDoan.startsWith("CD0003")) {
			String maCongDoanCheTac = "CD0002" + tblDSSP.getValueAt(selectedRowDSSP, 1).toString();
			soLuongCoTheThem = bangChamCongCongNhan_Dao.laySoLuongDaChamCongTheoMaCongDoan(maCongDoanCheTac)-bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan);
		} else if (maCongDoan.startsWith("CD0004")) {
			String maCongDoanBeMat = "CD0003" + tblDSSP.getValueAt(selectedRowDSSP, 1).toString();
			soLuongCoTheThem = bangChamCongCongNhan_Dao.laySoLuongDaChamCongTheoMaCongDoan(maCongDoanBeMat)-bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan);
		}
		if (soLuongCoTheThem == 0) {
			hienThongBaoLoi("Không đủ số lượng để phân công.");
			return;
		}
		JLabel lblSoLuongConLai = new JLabel("Số lượng còn lại:");
		JLabel lblSoLuongConLaiHienThi = new JLabel(String.valueOf(soLuongConLai));
		JLabel lblSoLuongCoTheThem = new JLabel("Số lượng có thể thêm:");
		JLabel lblSoLuongCoTheThemHienThi = new JLabel(String.valueOf(soLuongCoTheThem));

		// Kiểm tra số lượng công nhân phân công đã tối đa trước khi mở hộp thoại
		if (soLuongCongNhanToiDa - soLuongCongNhanDaPhanCong < 0) {
			hienThongBaoLoi("Số lượng công nhân phân công đã tối đa.");
			return;
		}

		JPanel panel = new JPanel(new GridLayout(2, 2));
		panel.add(lblSoLuongConLai);
		panel.add(lblSoLuongConLaiHienThi);
		panel.add(lblSoLuongCoTheThem);
		panel.add(lblSoLuongCoTheThemHienThi);

		int result = JOptionPane.showConfirmDialog(this, panel, "Phân công tự động", JOptionPane.OK_CANCEL_OPTION);

		if (result == JOptionPane.OK_OPTION) {
			String maCongDoan1 = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 1).toString();
			int soLuongThemInt = soLuongCoTheThem / soLuongCongNhanThemVao;
			System.out.println("So luong them vao moi cong nhan:"+soLuongThemInt);
			String maSanPham = tblDSSP.getValueAt(tblDSSP.getSelectedRow(), 1).toString();
			int rowCount = tblDSCN.getRowCount();
			int soLuongPhanCong = (soLuongThemInt == 0) ? 1 : soLuongThemInt;
			if (rowCount > 0) {
			    int loopLimit = Math.min(soLuongCongNhanThemVao, rowCount);		
			    for (int i = 0; i < loopLimit; i++) {
			        Object value = tblDSCN.getValueAt(i, 1);
			        String maCongNhan = (value != null) ? value.toString() : null;       
			        LocalDate ngayPhanCong = LocalDate.now();
			        CongDoan congDoan = daoCongDoan.timCongDoanTheoMa(maCongDoan);
			        CongNhan congNhan = congNhan_Dao.timCongNhanBangMa(maCongNhan);			        
			        BangPhanCongCongDoan phanCong = new BangPhanCongCongDoan(soLuongPhanCong, congDoan, congNhan, ngayPhanCong, soLuongPhanCong);
			        bangPhanCongCongDoan.themPhanCongCongDoan(phanCong);	        
			        soLuongCoTheThem -= soLuongPhanCong;			        
			    }

			    // Thực hiện phần sau vòng lặp for ngoài
			    for (int i = 0; i < loopLimit; i++) {
			        if (soLuongCoTheThem >= 1) {
			            Object value = tblDSCN.getValueAt(i, 1);
			            String maCongNhanLai = (value != null) ? value.toString() : null;
			            CongNhan congNhanLai = congNhan_Dao.timCongNhanBangMa(maCongNhanLai);
			            LocalDate ngayPhanCong = LocalDate.now();
			            CongDoan congDoan = daoCongDoan.timCongDoanTheoMa(maCongDoan);
			            BangPhanCongCongDoan phanCong = new BangPhanCongCongDoan(1 + soLuongPhanCong, congDoan, congNhanLai, ngayPhanCong, 1+soLuongPhanCong);
			            bangPhanCongCongDoan.suaPhanCongCongDoan(phanCong);
			            soLuongCoTheThem--;
			            if (soLuongCoTheThem == 0) {
			                break;
			            }
			        }
			    }
			}

			if (soLuongCoTheThem > 0) {
				hienThongBaoThongBao("Số lượng còn lại có thể thêm là: " + soLuongCoTheThem);
			}
			// Hiển thị lại các danh sách sau khi đã thêm vào cơ sở dữ liệu
			hienThiDanhSachCongDoanTheoSPChuaHoanThanh(maSanPham);
			hienThiDanhSachPhanCongTheoMaCongDoan(maCongDoan1);
			hienThiDanhSachCongNhanTheoMaChuyenMon(tenCongDoan);
			tblDSCongDoan.setRowSelectionInterval(selectedRowDSCongDoan, selectedRowDSCongDoan);
		} else {
			hienThongBaoThongBao("Bạn đã hủy phân công.");
		}
	}
	
	private void openPhanCongDialogSua() {
		selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
		JTextField txtNhapSoLuongThem = new JTextField();
		JLabel lblSoLuongConLai = new JLabel("Số lượng còn lại:");
		DAO_BangPhanCongCongDoan bangPhanCongCongDoan = new DAO_BangPhanCongCongDoan();
		CongNhan_Dao congNhan_Dao = new CongNhan_Dao();
		String maCongDoan = maCongDoanSelected;
		int selectedRowDSPhanCong = tblDSPhanCong.getSelectedRow();
		String soLuongPhanCongStr = tblDSPhanCong.getValueAt(selectedRowDSPhanCong, 3).toString();
		int soLuongPhanCong1 = Integer.parseInt(soLuongPhanCongStr);
		// Khai báo và khởi tạo giá trị cho soLuongConLai
		int soLuongConLai = daoCongDoan.laySoLuongThanhPhanTheoMaCongDoan(maCongDoan) - bangPhanCongCongDoan.tinhTongSoLuongPhanCongTheoMaCongDoan(maCongDoan) + soLuongPhanCong1;

		JLabel lblSoLuongConLaiHienThi = new JLabel(String.valueOf(soLuongConLai));
		JLabel lblNhapSoLuongThem = new JLabel("Nhập số lượng cần sửa:");

		JPanel panel = new JPanel(new GridLayout(4, 2));
		panel.add(lblSoLuongConLai);
		panel.add(lblSoLuongConLaiHienThi);
		panel.add(lblNhapSoLuongThem);
		panel.add(txtNhapSoLuongThem);

		int result = JOptionPane.showConfirmDialog(this, panel, "Phân công thu công", JOptionPane.OK_CANCEL_OPTION);

		if (result == JOptionPane.OK_OPTION) {
			String soLuongThem = txtNhapSoLuongThem.getText();

			try {
				int soLuongThemInt = Integer.parseInt(soLuongThem);

				// Kiểm tra nếu số lượng thêm vào lớn hơn 0 và nhỏ hơn hoặc bằng số lượng còn lại
				if (soLuongThemInt > 0 && soLuongThemInt <= soLuongConLai) {
					// Lấy dữ liệu từ tblDSPhanCong		
					String maCongNhan = tblDSPhanCong.getValueAt(selectedRowDSPhanCong, 1).toString();
					String ngaySua = tblDSPhanCong.getValueAt(selectedRowDSPhanCong, 4).toString();
					DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
					int selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
					String maCongDoan1 = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 1).toString();
					String tenCongDoan = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 2).toString();
					int selecRowDSSP = tblDSSP.getSelectedRow();
					String maSanPham = tblDSSP.getValueAt(selecRowDSSP, 1).toString();
					int soLuongPhanCong = soLuongThemInt;
					LocalDate ngayPhanCong = LocalDate.parse(ngaySua, formatter);
					CongDoan congDoan = daoCongDoan.timCongDoanTheoMa(maCongDoan);
					CongNhan congNhan = congNhan_Dao.timCongNhanBangMa(maCongNhan);
					BangPhanCongCongDoan phanCong = new BangPhanCongCongDoan(soLuongPhanCong, congDoan, congNhan, ngayPhanCong);
					bangPhanCongCongDoan.suaPhanCongCongDoan(phanCong);
					hienThiDanhSachCongDoanTheoSPChuaHoanThanh(maSanPham);
					hienThiDanhSachPhanCongTheoMaCongDoan(maCongDoan1);
					hienThiDanhSachCongNhanTheoMaChuyenMon(tenCongDoan);
					System.out.println("Đã sửa " + soLuongPhanCong + " công việc.");
					tblDSCongDoan.setRowSelectionInterval(selectedRowDSCongDoan, selectedRowDSCongDoan);
				} else {
					hienThongBaoLoi("Số lượng sửa phải lớn hơn 0 và nhỏ hơn hoặc bằng số lượng còn lại.");
				}

			} catch (NumberFormatException e) {
				hienThongBaoLoi("Nhập số lượng sửa không hợp lệ!");
			}
		} else {
			hienThongBaoThongBao("Bạn đã hủy phân công.");
		}
	}

	private void openPhanCongDialogXoa() {
		DefaultTableModel model = (DefaultTableModel) tblDSPhanCong.getModel();
		int selectedRowDSCongDoan = tblDSCongDoan.getSelectedRow();
		String maCongDoan = (selectedRowDSCongDoan >= 0) ? tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 1).toString() : "";
		int selecRowDSSP = tblDSSP.getSelectedRow();
		String maSanPham = (selecRowDSSP >= 0) ? tblDSSP.getValueAt(selecRowDSSP, 1).toString() : "";
		String tenCongDoan = tblDSCongDoan.getValueAt(selectedRowDSCongDoan, 2).toString();

		int confirmResult = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);

		if (confirmResult == JOptionPane.YES_OPTION) {
			List<String> dsMaCongNhanDaXoa = new ArrayList<>();

			for (int row = 0; row < model.getRowCount(); row++) {
				Object checkboxValue = model.getValueAt(row, 5);

				if (checkboxValue instanceof Boolean && (Boolean) checkboxValue) {
					String maCongNhan = model.getValueAt(row, 1).toString();
					// Xóa phân công
					DAO_BangPhanCongCongDoan bangPhanCongCongDoan = new DAO_BangPhanCongCongDoan();
					bangPhanCongCongDoan.xoaPhanCongCongDoanVaKhoiDs(maCongDoan, maCongNhan);
					// Thêm mã công nhân vào danh sách đã xóa
					dsMaCongNhanDaXoa.add(maCongNhan);
				}
			}

			// Kiểm tra xem có mã công nhân mới xóa hay không
			if (!dsMaCongNhanDaXoa.isEmpty()) {
				// Cập nhật model của bảng DSCN sau khi xóa tất cả
				if (selectedRowDSCongDoan >= 0) {
					hienThiDanhSachCongDoanTheoSPChuaHoanThanh(maSanPham);
					hienThiDanhSachPhanCongTheoMaCongDoan(maCongDoan);
					hienThiDanhSachCongNhanTheoMaChuyenMon(tenCongDoan);
				}
				tblDSCongDoan.setRowSelectionInterval(selectedRowDSCongDoan, selectedRowDSCongDoan);
				System.out.println("Đã xóa công việc.");
			} else {
				hienThongBaoLoi("Vui lòng chọn các hàng có checkbox được chọn để thực hiện xóa.");
			}
		}
	}
	private boolean areAnyCheckboxesSelected() {
	    DefaultTableModel model = (DefaultTableModel) tblDSPhanCong.getModel();

	    for (int row = 0; row < model.getRowCount(); row++) {
	        Object checkboxValue = model.getValueAt(row, 5);

	        if (checkboxValue instanceof Boolean && (Boolean) checkboxValue) {
	            return true;  // At least one checkbox is selected
	        }
	    }

	    return false;  // No checkboxes are selected
	}

	private Set<String> dsMaCongNhanDaXuatHien = new HashSet<>();
	int soLuongCongNhanDaPhanCong;
	private void hienThiDanhSachPhanCongTheoMaCongDoan(String maCongDoan) {
		DAO_BangPhanCongCongDoan dao = new DAO_BangPhanCongCongDoan();
		ArrayList<BangPhanCongCongDoan> dsPhanCong = dao.layDanhSachPhanCongCongDoanTheoMaCongDoan(maCongDoan);

		DefaultTableModel model = (DefaultTableModel) tblDSPhanCong.getModel();
		model.setRowCount(0); // Xóa hết các dòng hiện tại trong table
		int stt = 1; // Biến đếm

		for (BangPhanCongCongDoan bPC : dsPhanCong) {
			dsMaCongNhanDaXuatHien.add(bPC.getCongNhanDamNhan().getMaNhanSu());

			Object[] row = {
					stt,
					bPC.getCongNhanDamNhan().getMaNhanSu(),
					bPC.getCongNhanDamNhan().getHo() + " " + bPC.getCongNhanDamNhan().getTen(),
					bPC.getSoLuongPhanCong(),
					bPC.getNgayPhanCong()
			};
			model.addRow(row);
			stt++;
		}
		soLuongCongNhanDaPhanCong = stt;
	}
	// Trong phương thức hienThiDanhSachCongNhanTheoMaChuyenMon
	int soLuongCongNhanTrongDSCN;
	private void hienThiDanhSachCongNhanTheoMaChuyenMon(String tenCongDoan) {
		CongNhan_Dao dao = new CongNhan_Dao();
		String maChuyenMon = null;
		for (CongNhan congNhan : dao.getDs()) {
			if (congNhan.getChuyenMon().getTenChuyenMon().equalsIgnoreCase(tenCongDoan))
				maChuyenMon = congNhan.getChuyenMon().getMaChuyenMon();
		}

		if (maChuyenMon != null) {
			ArrayList<CongNhan> dsPhanCong = dao.layDanhSachCongNhanTheoMaChuyenMon(maChuyenMon);

			DefaultTableModel model = (DefaultTableModel) tblDSCN.getModel();
			model.setRowCount(0);

			int stt = 0;
			for (CongNhan congNhan : dsPhanCong) {
				// Kiểm tra xem maCongNhan đã xuất hiện trong dsMaCongNhanDaXuatHien chưa
				if (!dsMaCongNhanDaXuatHien.contains(congNhan.getMaNhanSu())) {
					Object[] row = {
							stt,
							congNhan.getMaNhanSu(),
							congNhan.getHo() + " " + congNhan.getTen(),
					};
					model.addRow(row);
					stt++;
					soLuongCongNhanTrongDSCN = stt;
				}
			}

			// Làm mới danh sách công nhân
			dsMaCongNhanDaXuatHien.clear();
		}
	}
	private void addSearchListenerSanPham() {
		// Lắng nghe sự kiện thay đổi nội dung của ô tìm kiếm
		txtTimKiemSanPham.getDocument().addDocumentListener((DocumentListener) new DocumentListener() {
			public void insertUpdate(DocumentEvent e) {
				search();
			}

			public void removeUpdate(DocumentEvent e) {
				search();
			}

			public void changedUpdate(DocumentEvent e) {
				search();
			}

			private void search() {
				String searchText = txtTimKiemSanPham.getText().trim();
				TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<>((DefaultTableModel) tblDSSP.getModel());
				tblDSSP.setRowSorter(rowSorter);

				try {
					// Tạo điều kiện tìm kiếm cho tất cả các cột
					rowSorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + searchText));
				} catch (PatternSyntaxException ex) {
					// Nếu có vấn đề với biểu thức chính quy
					JOptionPane.showMessageDialog(null, "Lỗi tìm kiếm!");
				}
			}
		});
	}
	private void addSearchListenerCongNhan() {
		// Lắng nghe sự kiện thay đổi nội dung của ô tìm kiếm
		txtTimKiemCongNhan.getDocument().addDocumentListener((DocumentListener) new DocumentListener() {
			public void insertUpdate(DocumentEvent e) {
				search();
			}

			public void removeUpdate(DocumentEvent e) {
				search();
			}

			public void changedUpdate(DocumentEvent e) {
				search();
			}

			private void search() {
				String searchText = txtTimKiemCongNhan.getText().trim();
				TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<>((DefaultTableModel) tblDSCN.getModel());
				tblDSCN.setRowSorter(rowSorter);

				try {
					// Tạo điều kiện tìm kiếm cho tất cả các cột
					rowSorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + searchText));
				} catch (PatternSyntaxException ex) {
					// Nếu có vấn đề với biểu thức chính quy
					JOptionPane.showMessageDialog(null, "Lỗi tìm kiếm!");
				}
			}
		});
	}
	private void addSearchListenerPhanCong() {
		// Lắng nghe sự kiện thay đổi nội dung của ô tìm kiếm
		txtDSPhanCong.getDocument().addDocumentListener((DocumentListener) new DocumentListener() {
			public void insertUpdate(DocumentEvent e) {
				search();
			}

			public void removeUpdate(DocumentEvent e) {
				search();
			}

			public void changedUpdate(DocumentEvent e) {
				search();
			}

			private void search() {
				String searchText = txtDSPhanCong.getText().trim();
				TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<>((DefaultTableModel) tblDSPhanCong.getModel());
				tblDSPhanCong.setRowSorter(rowSorter);

				try {
					// Tạo điều kiện tìm kiếm cho tất cả các cột
					rowSorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + searchText));
				} catch (PatternSyntaxException ex) {
					// Nếu có vấn đề với biểu thức chính quy
					JOptionPane.showMessageDialog(null, "Lỗi tìm kiếm!");
				}
			}
		});
	}
	private void addSearchListenerCongDoan() {
		// Lắng nghe sự kiện thay đổi nội dung của ô tìm kiếm
		txtDSCongDoan.getDocument().addDocumentListener((DocumentListener) new DocumentListener() {
			public void insertUpdate(DocumentEvent e) {
				search();
			}

			public void removeUpdate(DocumentEvent e) {
				search();
			}

			public void changedUpdate(DocumentEvent e) {
				search();
			}

			private void search() {
				String searchText = txtDSCongDoan.getText().trim();
				TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<>((DefaultTableModel) tblDSCongDoan.getModel());
				tblDSCongDoan.setRowSorter(rowSorter);

				try {
					// Tạo điều kiện tìm kiếm cho tất cả các cột
					rowSorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + searchText));
				} catch (PatternSyntaxException ex) {
					// Nếu có vấn đề với biểu thức chính quy
					JOptionPane.showMessageDialog(null, "Lỗi tìm kiếm!");
				}
			}
		});
	}
	private void hienThongBaoLoi(String message) {
		JOptionPane.showMessageDialog(this, message, "Lỗi", JOptionPane.ERROR_MESSAGE);
	}

	private void hienThongBaoThongBao(String message) {
		JOptionPane.showMessageDialog(this, message, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
	}


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnPhanCongTuDong;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JTable tblDSCongDoan;
	private javax.swing.JTable tblDSSP;
	private JTextField txtTimKiemSanPham;
	private JLabel lblTimKiemSanPham;
	private JScrollPane jScrollPane3;
	private JTable tblDSPhanCong;
	private JScrollPane jScrollPane4;
	private JTable tblDSCN;
	private JButton btnPhanCongThuCong;
	private JTextField txtTimKiemCongNhan;
	private JTextField txtDSPhanCong;
	private JLabel lblDSPhanCong;
	private JButton btnXoaPhanCong;
	private JComboBox cmbSanPham;
	private JButton btnSua;
	private JLabel lblTimKiemCongNhan;
	private JTextField txtDSCongDoan;
	private JLabel lblTimKiemCongDoan;
	private JButton btnChonTatCa;
	private JButton btnHDSD;
	private JLabel lblHDSD;
}

